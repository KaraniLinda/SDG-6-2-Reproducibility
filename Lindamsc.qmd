---
title: "SDG6reproducibility"
format: html
execute:
  echo: false
  warning: false
editor_options: 
  chunk_output_type: inline
---

```{r}
library(tidyverse)
library(modelr)
```

```{r}
```

# Data import

```{r}
jmpraw <- read_rds("data/2020-09-30_jmp_sanitation_raw_data.rds")
```

# Data exploration

## Data exploration

Text

```{r}
#| include: false 

glimpse(jmpraw)
```

```{r}
#| include: false 

head(jmpraw)
```

```{r}
#| include: false 

tail(jmpraw)
```
```{r}
jmpraw %>% 
    count(var_short, var_long) 

```



# Methods

## JMP Methods report

- 


# First linear model

- Model for Uganda, rural, improved
- Data is not linear

## Observations

Learn more about modeling in R:

-   R4DS chapter - https://r4ds.had.co.nz/model-intro.html
-   Book: Statistical Inference via Data Science: A ModernDive into R and the Tidyverse! - https://moderndive.com/
-   R Packages: Tidymodels - https://www.tidymodels.org/

https://broom.tidymodels.org/articles/broom.html



```{r}
#| echo: true

jmpraw |> 
    #filter(iso3 == "SEN") |> 
    group_by(iso3, var_short, residence) |> 
    #mutate(mean = mean(value))
    #summarise(mean(value))
    summarise(mean = mean(value),
              sd = sd(value))

```

## Reference papers

- LINK

**Gaps identified**

```{r}
jmpraw %>% 
    filter(iso3 == "UGA",residence == "rural", var_long == "Improved") %>% 
    ggplot(aes(x = year, y = value)) +
    geom_point() +
    geom_smooth(method = "lm", se = FALSE)

```



#using the linear model to predict from 2000-2007




```{r}

uga_rural_improved <- jmpraw %>%  
    filter(iso3 == "UGA",residence == "rural", var_long == "Improved") %>%  
    group_by(year) %>% 
    summarise(mean_value = mean(value))



    
```

```{r}

uga_rural_improved_lm_fit <- lm(mean_value ~ year, data = uga_rural_improved)

summary(uga_rural_improved_lm_fit)
    
library(broom)

tidy(uga_rural_improved_lm_fit) |>  
    knitr::kable(digits = 2)

glance(uga_rural_improved_lm_fit) |> 
        knitr::kable(digits = 2)

```
#using the linear model to predict from 2000-2007
```{r}

 
uga_values <- tibble(year = seq(2000,2020,1)) %>%
    add_predictions(model = uga_rural_improved_lm_fit)

uga_values         
```

#Join input with predictions
```{r}
uga_values %>% 
    left_join(uga_rural_improved)
```

# Model predictions all countries

```{r}

# Support from: https://stackoverflow.com/a/63774042/6816220

# Filter data for urban, rural, improved and shared

jmp_urban_rural_improved_shared <- jmpraw |> 
    filter(residence != "national",
           var_long %in% c("Improved", "Shared"))

jmp_urban_rural_improved_shared

```

```{r}

# summarise data by year

jmp_all_mean_value <- jmp_urban_rural_improved_shared |> 
    group_by(iso3, residence, var_long, year) |> 
    summarise(mean_value = mean(value)) |> 
    ungroup() 


```    

# Create a tidy dataframe with model intercept and coefficient


```{r}

# nest_by documentation: https://dplyr.tidyverse.org/reference/nest_by.html

jmp_models <- jmp_all_mean_value |> 
    nest_by(iso3, residence, var_long) |> 
    mutate(model = list(lm(mean_value ~ year, data = data))) 


jmp_models |> 
    summarise(rsq = summary(model)$r.squared)

jmp_models |> 
    summarise(broom::glance(model))

jmp_models |> 
    summarise(broom::tidy(model))
```



```{r}


dat_year <- tibble(year = seq(2000, 2020, 1))

jmp_fitted <- jmp_models |> 
    summarise(augment(model, newdata = dat_year))
jmp_fitted

```


```{r}

jmp_models_without_fitted <- jmp_models |> 
    summarise(augment(model)) |> 
    select(-.fitted)

jmp_models_without_fitted
```


# Spread data

```{r}

jmp_fitted |> 
    ungroup() |> 
    filter(iso3 == "UGA") |> 
    pivot_wider(var_long)

```


```{r}
# example from SO: https://stackoverflow.com/questions/32773617/add-column-of-predicted-values-to-data-frame-with-dplyr


library(purrr)
library(tidyr)
library(broom)

exampleTable <- data.frame(
  x = c(1:5, 1:5),
  y = c((1:5) + rnorm(5), 2*(5:1)),
  groups = rep(LETTERS[1:2], each = 5)
)

exampleTable %>% 
  group_by(groups) %>%
  nest() %>% 
  mutate(model = data %>% map(~lm(y ~ x, data = .))) %>% 
  mutate(Pred = map2(model, data, predict)) %>% 
  unnest(Pred, data)

```

