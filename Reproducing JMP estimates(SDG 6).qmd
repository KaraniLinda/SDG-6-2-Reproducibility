---
title: "Reproducing JMP estimates"
format: html
editor: visual
execute:
  echo: true
  warning: false
editor_options: 
  chunk_output_type: inline
---

```{r}
library(tidyverse)
library(modelr)
library(broom)
```

```{r}
jmpraw <- read_rds("data/2020-09-30_jmp_sanitation_raw_data.rds")
```

# JMP Primary indicators:

s1 : The proportion of population that uses improved sanitation facilities

s2 : The proportion of population that uses improved sanitation facilities connected to sewers

s3 : The proportion of population that uses improved sanitation facilities connected to septic tanks

s6: The proportion of population that uses no sanitation facilities(open defecation)

Improved refers only to the type of facility used irrespective of whether the facilities are shared by more than one household




```{r}
glimpse(jmpraw)

```

## s1 : The proportion of population that uses improved sanitation facilities



```{r}
jmp_urban_rural <- jmpraw %>%  
    filter(residence != "national")

jmp_urban_rural_improved

```

```{r}
distinct(jmpraw, var_long, san_service_chain)
```

```{r}
# summarise data by year

jmp_all_mean_value <- jmp_urban_rural |> 
    group_by(iso3, residence, var_long, year) |> 
    summarise(mean_value = mean(value)) %>% 
    ungroup()
  

jmp_all_mean_value
```

```{r}
# Generating a tibble 

min_max_year_iso3 <- jmp_all_mean_value |> 
    group_by(iso3) |> 
    summarise(
        min = min(year),
        max = max(year)
    ) 


diff_smaller_five_year_vec <- min_max_year_iso3 |> 
    mutate(diff = max - min) |> 
    filter(diff < 5) |>
    pull(iso3)

diff_greater_four_year_vec <- min_max_year_iso3 |> 
    mutate(diff = max - min) |> 
    filter(diff >= 5) |>
    pull(iso3)



min_max_year_iso3
diff_smaller_five_year_vec

```


```{r}
year_seq <- list()

for (name in min_max_year_iso3$iso3) {
    
    year_seq[[name]] <- tibble(
        iso3 = name,
        year = seq(filter(min_max_year_iso3, iso3 == name)$min - 2,
                   filter(min_max_year_iso3, iso3 == name)$max + 2,
                   by = 1)
    )
}

year_seq_df <- year_seq |> 
    bind_rows() |> 
    filter(year >= 2000 & year <= 2020)


```




# All Mean estimates

```{r}

jmp_mean_estimates <- jmp_all_mean_value %>%
    filter(iso3 %in% diff_smaller_five_year_vec) |> 
    group_by(iso3, residence, var_long) %>% 
    summarise(average_estimate = mean(mean_value)) |> 
    left_join(year_seq_df)

jmp_mean_estimates

```

# All OLS Model estimates

```{r}
# Getting the model coefficients

jmp_models <- jmp_all_mean_value %>% 
    filter(iso3 %in% diff_greater_four_year_vec) |> 
    nest_by(iso3, residence, var_long) %>% 
    mutate(model = list(lm(mean_value ~ year, data = data)))

jmp_models |> 
    summarise(rsq = summary(model)$r.squared)

jmp_models |> 
    summarise(broom::glance(model))

jmp_models |> 
    summarise(broom::tidy(model))



```


```{r}

jmp_fitted <- jmp_models |>
    summarise(augment(model, newdata = year_seq_df))

jmp_fitted
```


```{r}
# nest_by documentation: https://dplyr.tidyverse.org/reference/nest_by.html

# Create a tidy dataframe with model intercept and coefficient
jmp_models <- jmp_all_mean_value |> 
    nest_by(iso3, residence, var_long) |> 
    mutate(model = list(lm(mean_value ~ year, data = data))) 


jmp_models |> 
    summarise(rsq = summary(model)$r.squared)

jmp_models |> 
    summarise(broom::glance(model))

jmp_models |> 
    summarise(broom::tidy(model))
```

```{r}

# Adding predicted/fitted values to the model

dat_year <- tibble(year = seq(2000, 2020, 1))

jmp_fitted <- jmp_models |> 
    summarise(augment(model, newdata = dat_year))
jmp_fitted

```

## s2 : The proportion of population that uses improved sanitation facilities connected to sewers

```{r}
jmp_urban_rural_sewer <- jmpraw |> 
    filter(residence != "national",
           var_long %in% c("Sewer"))

jmp_urban_rural_sewer
```

```{r}
# summarise data by year

jmp_all_mean_value <- jmp_urban_rural_sewer |> 
    group_by(iso3, residence, var_long, year) |> 
    summarise(mean_value = mean(value)) |> 
    ungroup()
```

```{r}
# Create a tidy dataframe with model intercept and coefficient
jmp_models <- jmp_all_mean_value |> 
    nest_by(iso3, residence, var_long) |> 
    mutate(model = list(lm(mean_value ~ year, data = data))) 


jmp_models |> 
    summarise(rsq = summary(model)$r.squared)

jmp_models |> 
    summarise(broom::glance(model))

jmp_models |> 
    summarise(broom::tidy(model))
```

```{r}
# Adding predicted/fitted values to the model

dat_year <- tibble(year = seq(2000, 2020, 1))

jmp_fitted <- jmp_models |> 
    summarise(augment(model, newdata = dat_year))
jmp_fitted

```

## s3 : The proportion of population that uses improved sanitation facilities connected to septic tanks

```{r}
jmp_urban_rural_septic <- jmpraw |> 
    filter(residence != "national",
           var_long %in% c("Septic"))

jmp_urban_rural_septic
```

```{r}
jmp_all_mean_value <- jmp_urban_rural_septic |> 
    group_by(iso3, residence, var_long, year) |> 
    summarise(mean_value = mean(value)) |> 
    ungroup()
```

```{r}
# Create a tidy dataframe with model intercept and coefficient
jmp_models <- jmp_all_mean_value |> 
    nest_by(iso3, residence, var_long) |> 
    mutate(model = list(lm(mean_value ~ year, data = data))) 


jmp_models |> 
    summarise(rsq = summary(model)$r.squared)

jmp_models |> 
    summarise(broom::glance(model))

jmp_models |> 
    summarise(broom::tidy(model))
```

```{r}
# Adding predicted/fitted values to the model

dat_year <- tibble(year = seq(2000, 2020, 1))

jmp_fitted <- jmp_models |> 
    summarise(augment(model, newdata = dat_year))
jmp_fitted
```

## s6: The proportion of population that uses no sanitation facilities(open defecation)

```{r}
jmp_urban_rural_opendefecation <- jmpraw |> 
    filter(residence != "national",
           var_long %in% c("Open defecation"))

jmp_urban_rural_opendefecation
```

```{r}
jmp_all_mean_value <- jmp_urban_rural_opendefecation |> 
    group_by(iso3, residence, var_long, year) |> 
    summarise(mean_value = mean(value)) |> 
    ungroup()

```

```{r}
# Create a tidy dataframe with model intercept and coefficient
jmp_models <- jmp_all_mean_value |> 
    nest_by(iso3, residence, var_long) |> 
    mutate(model = list(lm(mean_value ~ year, data = data))) 


jmp_models |> 
    summarise(rsq = summary(model)$r.squared)

jmp_models |> 
    summarise(broom::glance(model))

jmp_models |> 
    summarise(broom::tidy(model))
```

```{r}
dat_year <- tibble(year = seq(2000, 2020, 1))

jmp_fitted <- jmp_models |> 
    summarise(augment(model, newdata = dat_year))
jmp_fitted
```
