---
title: "Reproducing JMP estimates"
format: html
editor: visual
execute:
  echo: true
  warning: false
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(modelr)
library(broom)
```

```{r}


jmpraw <- read_rds("data/2020-09-30_jmp_sanitation_raw_data.rds")

jmpraw <- read_csv("https://raw.githubusercontent.com/larnsce/washr/master/data/derived_data/2022-10-18_jmp_sanitation_raw_data.csv")

jmp_san_variables <- jmpraw %>% 
    select(var_short, var_long, residence) %>% 
    unique()

```

# JMP Primary indicators:

s1 : The proportion of population that uses improved sanitation facilities

s2 : The proportion of population that uses improved sanitation facilities connected to sewers

s3 : The proportion of population that uses improved sanitation facilities connected to septic tanks

s6: The proportion of population that uses no sanitation facilities(open defecation)

Improved refers only to the type of facility used irrespective of whether the facilities are shared by more than one household

```{r}
jmp_urban_rural <- jmpraw %>%  
    filter(residence != "national") %>% 
    filter(var_long %in% c("Open defecation", "Improved", "Shared", "Septic" , "Sewer"))

# basic services (improved, but not shared)
# limited services (improved, but shared)
# open defecation (open defecation)
# unimproved services (improved - open defecation)
jmpraw %>%  
    filter(residence == "national") %>% 
    filter(var_long %in% c("Open defecation", "Improved", "Shared", "Septic" , "Sewer")) %>% 
    count(iso3)


```

In 42 out of 232 countries, areas and territories, data inputs were not available disaggregated into urban and rural populations, and national estimates were generated directly. In eight countries, areas or territories, the entire population is classified as either urban or rural. In these cases national estimates are identical to the urban or rural estimates.

TODO: Which are those countries and how are estimates currently calculated? Currently not calculated.

## Average by year

When more than two data points exist for one year, the mean is calculated for that specific year. (Page 8)

> Some panel surveys collect multiple rounds within a single year, or disaggregate findings temporally (e.g. by rainy
and dry season). In this case, where possible, data will be combined into a single set of statistics representing average values for the year

```{r}
# summarise data by year

jmp_all_mean_value <- jmp_urban_rural |> 
    group_by(iso3, var_short, year) |> 
    summarise(mean_value = mean(value)) %>% 
    ungroup()
```

## Rules

**Interpolation rules (within the years covered by data inputs)**

1. If data points are at least five years apart, estimates are interpolated using ordinary least squares linear regression.
2. If data points are less than five years apart, estimates are interpolated using a simple average.

**Extrapolation rules (outside the years covered by data inputs)**

3. If there are at least two data points, estimates are extrapolated using ordinary least squares linear regression (or simple average, if data points are less than five years apart) forwards two years from the latest data point, and backwards two years from the earliest data point.

4. If extrapolation results in estimates above 100% or below 0%, the estimates are fixed at 100% and 0%, respectively.

5. If there is only one data point, no extrapolation is made. 

**Extension rules (beyond the years covered by data inputs and extrapolation)**

6. Estimates are extended forwards four years from the latest estimate, and backwards four years from the earliest estimate

7. Estimates are extended forwards or backwards indefinitely, if the estimate is 99.5% or greater, or 0.5% or less.

## Interpolation 

The method for building an estimate are based on the number of years that data points are apart. We therefore identify the minimum and maximum year for each country and variable.

Then, the difference is calculated and the dataframe is split by a difference of:

- less than 5 years -> simple average interpolation rule
- at least 5 years apart -> ordinary least squares linear regression interpolation rule

```{r}

min_max_year_iso3 <- jmp_all_mean_value |> 
    group_by(iso3, var_short) |> 
    summarise(
        min = min(year),
        max = max(year)
    ) 

diff_smaller_five_year_min_max <- min_max_year_iso3 |> 
    mutate(diff = max - min) |> 
    filter(diff < 5) 

diff_smaller_five_year_df <- diff_smaller_five_year_min_max %>% 
    select(iso3, var_short)


diff_greater_four_year_min_max <- min_max_year_iso3 |> 
    mutate(diff = max - min) |> 
    filter(diff >= 5) 

diff_greater_four_year_df <- diff_greater_four_year_min_max |>
    select(iso3, var_short)

```

## Extrapolation

### Linear regression

The followin code creates a dataframe that contains a variable 'year' which 
contains the extrapolation of two years for all countries, based on the 
minimum and maximum for each variable.

```{r}

nested_list <- list()

# TODO: Improve this nested for loop (current execution time is about 15s)

for (name in unique(diff_greater_four_year_min_max$iso3)) {
    
    for (var in filter(diff_greater_four_year_min_max, iso3 == name)$var_short) {
        
        nested_list[[name]][[var]] <- tibble(
            iso3 = name,
            var_short = var,
            year = seq(from = filter(diff_greater_four_year_min_max, iso3 == name, var_short == var) %>% 
                           pull(min) - 2,
                       to = filter(diff_greater_four_year_min_max, iso3 == name, var_short == var) %>% 
                           pull(max) + 2,
                       by = 1)
        )
        
    }
}

iso3_var_short_list <- list()

for (name in unique(diff_greater_four_year_min_max$iso3)) {
    
    iso3_var_short_list[[name]] <- nested_list[[name]] %>% 
        bind_rows()
    
}

year_seq_df <- iso3_var_short_list %>% 
    bind_rows() |> 
    filter(year >= 2000 & year <= 2020)



```

### Mean values

```{r}

year_seq_df_all_years <- min_max_year_iso3 %>% 
    distinct(iso3, var_short) %>% 
    ungroup() %>% 
    nest_by(iso3, var_short) %>% 
    select(-data) %>% 
    mutate(year = list(seq(2000, 2020))) %>% 
    unnest(cols = c(year)) 
```


## Extension

Example: Afghanistan, Septic Tanks, urban

Last raw data point 2011. Extrapolation 2 years to 2009. Extension 4 years to 2005. 

**Note:** In JMP country files, estimates are extended beyond plus/minus 4 years.

```{r}

year_seq_df %>% 
    filter(iso3 == "AFG", var_short == "s_sep_u")
    count(iso3, var_short)
```

```{r}
year_seq_df %>% 
    filter(iso3 == "AUT", var_short == "s_sep_u")
    count(iso3, var_short)

```


# All Mean estimates

```{r}

# jmp_mean_estimates <- jmp_all_mean_value %>%
#     filter(iso3 %in% diff_smaller_five_year_vec) |> 
#     group_by(iso3, var_short) %>% 
#     summarise(average_estimate = mean(mean_value)) |> 
#     left_join(year_seq_df)
# 

jmp_mean_estimates <- jmp_all_mean_value %>% 
    right_join(diff_smaller_five_year_df) %>% 
    group_by(iso3, var_short) %>% 
    summarise(average_estimate = mean(mean_value)) %>% 
    left_join(year_seq_df_all_years) 

```

# All OLS Model estimates

```{r}
# Getting the model coefficients

jmp_models <- jmp_all_mean_value %>% 
    #filter(iso3 %in% diff_greater_four_year_vec) |> 
    right_join(diff_greater_four_year_df) %>% 
    nest_by(iso3, var_short) %>% 
    mutate(model = list(lm(mean_value ~ year, data = data))) 

# jmp_models |> 
#     summarise(rsq = summary(model)$r.squared)
# 
# jmp_models |> 
#     summarise(broom::glance(model)) 

jmp_models |> 
    summarise(broom::tidy(model)) %>% 
    left_join(jmp_san_variables) %>% 
    write_csv(file = "data/derived/jmp_primary_indicator_estimates_model_coefficients.csv")

jmp_models |> 
    summarise(broom::glance(model)) %>% 
    left_join(jmp_san_variables) %>%
    write_csv(file = "data/derived/jmp_primary_indicator_estimates_measures_of_model_fit.csv")

```

# All fitted values from OLS regression

## Run linear regression for all years

```{r}

dat_year <- tibble(year = seq(2000, 2020, 1))

jmp_fitted <- jmp_models %>% 
    summarise(augment(model, newdata = dat_year))


```

## Remove years for which data extrapolates beyond 2 years

```{r}
# Join fitted values to year seq df

jmp_seq_fitted <- jmp_fitted %>% 
    # remove the years for which the extrapolation goes beyond 2 years
    right_join(year_seq_df) 

jmp_fitted %>% 
    filter(iso3 == "AGO",
           var_short == "s_shared_u") 

year_seq_df %>% 
    filter(iso3 == "AGO",
           var_short == "s_shared_u") 

```


```{r}
# Use sequence for all years to prepare for extension to 2000 and 2020 after
# linear regression 

jmp_seq_fitted_extended <- year_seq_df_all_years %>% 
    # NAs are introduced here. They are var_long for countries were averages 
    # are computed
    left_join(jmp_seq_fitted) %>% 
    group_by(iso3, var_short) %>% 
    fill(.fitted, .direction = "updown") %>% 
    # remove NAs. 
    filter(!is.na(.fitted))


```

## Add var_long and residence variables

```{r}

jmp_seq_fitted_extended_complete <- jmp_seq_fitted_extended %>% 
    left_join(jmp_san_variables)

```

## Combine mean estimates and linear model into one dataframe

```{r}

jmp_primary_indicator_estimates <- jmp_mean_estimates %>% 
    relocate(year, .after = var_short) %>% 
    rename(estimate = average_estimate) %>% 
    left_join(jmp_san_variables) %>% 
    bind_rows(
        jmp_seq_fitted_extended_complete %>% 
            rename(estimate = .fitted)
    )  

jmp_primary_indicator_estimates %>%
    write_csv("data/derived/jmp_primary_indicator_estimates.csv")

jmp_primary_indicator_estimates

```

## Calculation of secondary indicators

A basic sanitation service (S8) is defined as use of an improved sanitation facility which is not shared with other households. This is calculated by multiplying the estimate of the population using improved sanitation facilities (S1) by ratio RS1, the ratio of the population using improved facilities which are not shared to the total population using improved facilities.

-   S8 = S1 \* RS1

RS1, the ratio of the population using improved facilities which are not shared to the total population using improved facilities.

-   RS1 = S1 / S1 - "shared"

### Questions

1. Is the estimate for shared in each year calculated using averages over all
years with data points?

2. How exactly is the ratio RS1 calculated?

3. Multiplying s_imp_r with s_shared_r / 100 provides estimates for san_bas_r 
that align with the JMP estimates, but this calculation does not follow the
method described in the 2017 methods document.

```{r}


jmp_primary_indicator_estimates_wide <- jmp_primary_indicator_estimates %>% 
    filter(var_long %in% c("Improved", "Open defecation", "Shared")) %>% 
    select(-var_long, -residence) %>% 
    pivot_wider(names_from = "var_short", values_from = "estimate") 

jmp_primary_indicator_estimates_wide %>% 
    filter(iso3 == "AFG") %>% 
    mutate(
        # RS1 = (s_imp_r - s_shared_r) / s_imp_r,
        # san_bas_r2 = s_imp_r * RS1,
        san_lim_r = s_imp_r * (s_shared_r / 100), 
        san_bas_r = s_imp_r - san_lim_r,
        san_unimp_r = 100 - s_imp_r - san_lim_r - s_od_r,
        san_od_r = s_od_r
    ) 


```

# Getting the primary indicators

## s1 : The proportion of population that uses improved sanitation facilities(

```{r}
s1ols <- jmp_seq_fitted %>% 
    filter(var_long == "Improved")


s1ols

s1average <- jmp_mean_estimates %>%
    filter(var_long == "Improved")

s1average


```

## s2 : The proportion of population that uses improved sanitation facilities connected to sewers

```{r}
s2ols <- jmp_seq_fitted %>% 
    filter(var_long == "Sewer")


s2ols

s2average <- jmp_mean_estimates %>%
    filter(var_long == "Sewer")

s2average

```

## s3 : The proportion of population that uses improved sanitation facilities connected to septic tanks

```{r}
s3ols <- jmp_seq_fitted %>% 
    filter(var_long == "Septic")


s3ols

s3average <- jmp_mean_estimates %>%
    filter(var_long == "Septic")

s3average
```

## s6: The proportion of population that uses no sanitation facilities(open defecation)

```{r}
s6ols <- jmp_seq_fitted %>% 
    filter(var_long == "Open defecation")


s6ols

s6average <- jmp_mean_estimates %>%
    filter(var_long == "Open defecation")

s6average
```

# Notes

-   supporting text for the code that is written in this document (less priority)
-   the estimates are not yet compared to JMP estimates (high priority)
-   estimates for national residence are not available (medium priority)
-   but, check how national is derived from urban and rural
-   have you worked on visualisations for statistics outputs?
-   
