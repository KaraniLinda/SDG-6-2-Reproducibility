---
title: "Reproducing JMP estimates"
format: html
editor: visual
execute:
  echo: true
  warning: false
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(modelr)
library(broom)
```

```{r}


jmpraw <- read_rds("data/2020-09-30_jmp_sanitation_raw_data.rds")

```

# JMP Primary indicators:

s1 : The proportion of population that uses improved sanitation facilities

s2 : The proportion of population that uses improved sanitation facilities connected to sewers

s3 : The proportion of population that uses improved sanitation facilities connected to septic tanks

s6: The proportion of population that uses no sanitation facilities(open defecation)

Improved refers only to the type of facility used irrespective of whether the facilities are shared by more than one household

```{r}
jmp_urban_rural <- jmpraw %>%  
    filter(residence != "national") %>% 
    filter(var_long %in% c("Open defecation", "Improved", "Shared", "Septic" , "Sewer"))

# basic services (improved, but not shared)
# limited services (improved, but shared)
# open defecation (open defecation)
# unimproved services (improved - open defecation)


```

```{r}
# summarise data by year

jmp_all_mean_value <- jmp_urban_rural |> 
    group_by(iso3, residence, var_long, year) |> 
    summarise(mean_value = mean(value)) %>% 
    ungroup()
```

```{r}
# Generating a tibble 

min_max_year_iso3 <- jmp_all_mean_value |> 
    group_by(iso3, var_long) |> 
    summarise(
        min = min(year),
        max = max(year)
    ) 

diff_smaller_five_year_vec <- min_max_year_iso3 |> 
    mutate(diff = max - min) |> 
    filter(diff < 5) |>
    pull(iso3) 


diff_greater_four_year_vec <- min_max_year_iso3 |> 
    mutate(diff = max - min) |> 
    filter(diff >= 5) |>
    pull(iso3)

```

```{r}

nested_list <- list()

# TODO: Improve this nested for loop (current execution time is about 15s)

filter(min_max_year_iso3, iso3 == "AFG")$var_long

for (name in unique(min_max_year_iso3$iso3)) {
    
    for (var in filter(min_max_year_iso3, iso3 == name)$var_long) {
        
        nested_list[[name]][[var]] <- tibble(
            iso3 = name,
            var_long = var,
            year = seq(from = filter(min_max_year_iso3, iso3 == name, var_long == var) %>% 
                           pull(min) - 2,
                       to = filter(min_max_year_iso3, iso3 == name, var_long == var) %>% 
                           pull(max) + 2,
                       by = 1)
        )
        
    }
}

iso3_var_long_list <- list()

for (name in unique(min_max_year_iso3$iso3)) {
    
    iso3_var_long_list[[name]] <- nested_list[[name]] %>% 
        bind_rows()
    
}

year_seq_df <- iso3_var_long_list %>% 
    bind_rows() |> 
    filter(year >= 2000 & year <= 2020)

```

# All Mean estimates

```{r}

jmp_mean_estimates <- jmp_all_mean_value %>%
    filter(iso3 %in% diff_smaller_five_year_vec) |> 
    group_by(iso3, residence, var_long) %>% 
    summarise(average_estimate = mean(mean_value)) |> 
    left_join(year_seq_df)

```

# All OLS Model estimates

```{r}
# Getting the model coefficients

jmp_models <- jmp_all_mean_value %>% 
    filter(iso3 %in% diff_greater_four_year_vec) |> 
    nest_by(iso3, residence, var_long) %>% 
    mutate(model = list(lm(mean_value ~ year, data = data)))

# jmp_models |> 
#     summarise(rsq = summary(model)$r.squared)
# 
# jmp_models |> 
#     summarise(broom::glance(model)) 


jmp_models |> 
    summarise(broom::tidy(model)) %>% 
    write_csv(file = "data/derived/jmp_primary_indicator_estimates_model_coefficients.csv")


jmp_models |> 
    summarise(broom::glance(model)) %>% 
    write_csv(file = "data/derived/jmp_primary_indicator_estimates_measures_of_model_fit.csv")

```

# All fitted values from OLS regression

```{r}

dat_year <- tibble(year = seq(2000, 2020, 1))

jmp_fitted <- jmp_models %>% 
    summarise(augment(model, newdata = dat_year))


```

```{r}

# Join fitted values to year seq df

jmp_seq_fitted <- jmp_fitted %>% 
    right_join(year_seq_df)

jmp_mean_estimates %>% 
    relocate(year, .after = var_long) %>% 
    rename(estimate = average_estimate) %>% 
    bind_rows(
        jmp_seq_fitted %>% 
            rename(estimate = .fitted)
    ) %>% 
    write_csv("data/derived/jmp_primary_indicator_estimates.csv")

```

# Getting the primary indicators

## s1 : The proportion of population that uses improved sanitation facilities(

```{r}
s1ols <- jmp_seq_fitted %>% 
    filter(var_long == "Improved")


s1ols

s1average <- jmp_mean_estimates %>%
    filter(var_long == "Improved")

s1average


```

## s2 : The proportion of population that uses improved sanitation facilities connected to sewers

```{r}
s2ols <- jmp_seq_fitted %>% 
    filter(var_long == "Sewer")


s2ols

s2average <- jmp_mean_estimates %>%
    filter(var_long == "Sewer")

s2average

```

## s3 : The proportion of population that uses improved sanitation facilities connected to septic tanks

```{r}
s3ols <- jmp_seq_fitted %>% 
    filter(var_long == "Septic")


s3ols

s3average <- jmp_mean_estimates %>%
    filter(var_long == "Septic")

s3average
```

## s6: The proportion of population that uses no sanitation facilities(open defecation)

```{r}
s6ols <- jmp_seq_fitted %>% 
    filter(var_long == "Open defecation")


s6ols

s6average <- jmp_mean_estimates %>%
    filter(var_long == "Open defecation")

s6average
```

# Notes

-   supporting text for the code that is written in this document (less priority)
-   the estimates are not yet compared to JMP estimates (high priority)
-   estimates for national residence are not available (medium priority)
-   but, check how national is derived from urban and rural
-   have you worked on visualisations for statistics outputs?
-   
